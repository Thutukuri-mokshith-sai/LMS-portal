import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import {
Â  Â  FaUniversity, FaUserCircle, FaSignOutAlt, FaBars, FaTimes,
Â  Â  FaArrowLeft, FaSpinner, FaFolderOpen, FaFilePdf, FaFileWord, 
Â  Â  FaFileImage, FaLink, FaFileAlt, FaVideo, FaListAlt, FaBookOpen, FaStar, FaClock, FaChalkboardTeacher, FaComments 
} from 'react-icons/fa';
import { useAuth } from "../../context/AuthContext";
// Assuming you have a CSS file for styling
import './StudentDashboard.css'; // <-- CSS Import

// --- Configuration ---
// ðŸš€ QoL Update: Added explicit /api to base URL for clarity
const API_BASE_URL = 'http://localhost:3000/api'; 


// ---------------------------------------------------------------------
// --- REUSED COMPONENTS (Keeping them as is) ---
// ---------------------------------------------------------------------

const ProfileModal = ({ authData, onClose }) => {
Â  Â  const { name, logout } = authData;
Â  Â  return (
Â  Â  Â  Â  <div className="profile-modal-backdrop" onClick={onClose}>
Â  Â  Â  Â  Â  Â  <div className="profile-card-neon" onClick={(e) => e.stopPropagation()}>
Â  Â  Â  Â  Â  Â  Â  Â  <button className="modal-close-btn" onClick={onClose}><FaTimes /></button>
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="title-neon">Welcome, {name.split(' ')[0]}!</h2>
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={logout} className="btn-logout-neon full-width-btn">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaSignOutAlt /> Secure Logout
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

const DashboardNavbar = ({ studentName, onLogout, onProfileToggle, onSidebarToggle, isSidebarOpen }) => (
Â  Â  <nav className="dashboard-navbar-neon">
Â  Â  Â  Â  <button className="sidebar-toggle-btn" onClick={onSidebarToggle}>
Â  Â  Â  Â  Â  Â  {isSidebarOpen ? <FaTimes /> : <FaBars />}
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <div className="logo"><FaUniversity className="logo-icon" /> The Matrix Academy</div>
Â  Â  Â  Â  <div className="nav-profile-group">
Â  Â  Â  Â  Â  Â  <span className="student-name" onClick={onProfileToggle}><FaUserCircle /> {studentName}</span>
Â  Â  Â  Â  Â  Â  <button className="btn-logout-neon" onClick={onLogout}><FaSignOutAlt /> Logout</button>
Â  Â  Â  Â  </div>
Â  Â  </nav>
);

const DashboardSidebar = ({ isOpen }) => (
Â  Â  <aside className={`dashboard-sidebar-neon ${!isOpen ? 'sidebar-closed' : ''}`}>
Â  Â  Â  Â  <div className="sidebar-header">MENU</div>
Â  Â  Â  Â  <nav className="sidebar-nav">
Â  Â  Â  Â  Â  Â  <Link to="/student" className="nav-link"><FaListAlt /> <span className="link-text">Dashboard</span></Link>
Â  Â  Â  Â  Â  Â  <Link to="/student/my-courses" className="nav-link active"><FaBookOpen /> <span className="link-text">My Courses</span></Link>
Â  Â  Â  Â  Â  Â  <Link to="/student/courses" className="nav-link"><FaUniversity /> <span className="link-text">Enroll Courses</span></Link>
Â  Â  Â  Â  Â  Â  <Link to="/student/grades" className="nav-link"><FaStar /> <span className="link-text">Grades</span></Link>
Â  Â  Â  Â  Â  Â  <Link to="/student/discussion" className="nav-link"><FaComments /> <span className="link-text">Discussion Forum</span></Link> 
Â  Â  Â  Â  Â  Â  <Link to="/student/profile" className="nav-link"><FaUserCircle /> <span className="link-text">Profile</span></Link>
Â  Â  Â  Â  </nav>
Â  Â  </aside>
);


// ---------------------------------------------------------------------
// --- MAIN COMPONENT: StudentCourseMaterialsView ---
// ---------------------------------------------------------------------

// Helper function to get the appropriate icon based on file type
const getFileIcon = (fileType) => {
Â  Â  const type = fileType ? fileType.toLowerCase() : 'link';
Â  Â  if (type.includes('pdf')) return <FaFilePdf className="file-icon pdf" />;
Â  Â  if (type.includes('doc') || type.includes('word')) return <FaFileWord className="file-icon doc" />;
Â  Â  if (type.includes('png') || type.includes('jpg') || type.includes('jpeg')) return <FaFileImage className="file-icon img" />;
Â  Â  if (type.includes('video')) return <FaVideo className="file-icon video" />;
Â  Â  if (type === 'link') return <FaLink className="file-icon link" />;
Â  Â  return <FaFileAlt className="file-icon generic" />;
};

// Material Card Component
const MaterialCard = ({ material }) => {
Â  Â  const formattedDate = new Date(material.createdAt).toLocaleDateString();
Â  Â  
Â  Â  return (
Â  Â  Â  Â  <div className="widget-card material-card-neon">
Â  Â  Â  Â  Â  Â  <div className="material-header">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="material-icon-box">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {getFileIcon(material.fileType)}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="material-info">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="material-title">{material.title}</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="material-meta">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Type: **{material.fileType || 'Link'}** | Uploaded By: **{material.Uploader?.name || 'Unknown'}** on **{formattedDate}**
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="material-action">
Â  Â  Â  Â  Â  Â  Â  Â  <a 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  href={material.materialLink} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  target="_blank" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  rel="noopener noreferrer"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="btn-action-neon small"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaLink /> Access Material
Â  Â  Â  Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};


const StudentCourseMaterialsView = () => {
Â  Â  const { courseId } = useParams(); 
Â  Â  const auth = useAuth();
Â  Â  const navigate = useNavigate();

Â  Â  const { user, logout, token } = auth;
Â  Â  const studentName = user?.name || 'Student';

Â  Â  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
Â  Â  const [isProfileOpen, setIsProfileOpen] = useState(false);

Â  Â  const [materialsData, setMaterialsData] = useState({ materials: [], courseTitle: '' });
Â  Â  const [isLoading, setIsLoading] = useState(true);
Â  Â  const [error, setError] = useState(null);

Â  Â  const toggleSidebar = () => setIsSidebarOpen(prev => !prev);
Â  Â  const toggleProfile = () => setIsProfileOpen(prev => !prev);

Â  Â  const handleLogout = () => {
Â  Â  Â  Â  logout();
Â  Â  Â  Â  navigate('/login');
Â  Â  };

Â  Â  // API call to fetch all course materials
Â  Â  useEffect(() => {
Â  Â  Â  Â  const fetchMaterials = async () => {
Â  Â  Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  Â  Â  setError(null);

Â  Â  Â  Â  Â  Â  if (!token || !courseId) {
Â  Â  Â  Â  Â  Â  Â  Â  setError(token ? "Invalid course ID." : "Authentication required. Please log in.");
Â  Â  Â  Â  Â  Â  Â  Â  if (!token) navigate('/login');
Â  Â  Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  // ðŸš¨ FIX APPLIED HERE: Changed from /materials/ to /material/
Â  Â  Â  Â  Â  Â  Â  Â  const response = await fetch(`${API_BASE_URL}/material/course/${courseId}`, {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  headers: { 'Authorization': `Bearer ${token}` }
Â  Â  Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // ðŸš€ QoL Update: Check if response text is valid JSON before parsing
                    const contentType = response.headers.get("content-type");
                    if (contentType && contentType.indexOf("application/json") !== -1) {
                        const errorData = await response.json();
                        if (response.status === 403) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â    throw new Error(errorData.message || 'Access Denied. Not authorized/enrolled.');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new Error(errorData.message || `Failed with status ${response.status}.`);
                    } else {
                        // The server returned HTML (the <!DOCTYPE error)
                        throw new Error(`Connection Error: The server returned an invalid response (Status ${response.status}). Check your backend routing.`);
                    }
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  const data = await response.json();
Â  Â  Â  Â  Â  Â  Â  Â  setMaterialsData(data.data); 

Â  Â  Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  Â  Â  console.error("Material fetch error:", err);
Â  Â  Â  Â  Â  Â  Â  Â  setError(err.message || 'An unexpected error occurred while loading materials.');
Â  Â  Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  fetchMaterials();
Â  Â  }, [courseId, token, navigate]);

Â  Â  const mainContentClass = `main-content-area ${!isSidebarOpen ? 'sidebar-closed-content' : ''}`;
Â  Â  
Â  Â  // --- Render Logic ---
Â  Â  
Â  Â  // 1. Loading State UI
Â  Â  if (isLoading) return (
Â  Â  Â  Â  <div className="app-container">
Â  Â  Â  Â  Â  Â  <DashboardNavbar studentName={studentName} onLogout={handleLogout} onProfileToggle={toggleProfile} onSidebarToggle={toggleSidebar} isSidebarOpen={isSidebarOpen}/>
Â  Â  Â  Â  Â  Â  <DashboardSidebar isOpen={isSidebarOpen} />
Â  Â  Â  Â  Â  Â  <main className={mainContentClass}>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="loading-state">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaSpinner className="spinner" /> 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>Loading course materials...</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </main>
Â  Â  Â  Â  </div>
Â  Â  );
Â  Â  
Â  Â  // 2. Error State UI
Â  Â  if (error) return (
Â  Â  Â  Â  <div className="app-container">
Â  Â  Â  Â  Â  Â  <DashboardNavbar studentName={studentName} onLogout={handleLogout} onProfileToggle={toggleProfile} onSidebarToggle={toggleSidebar} isSidebarOpen={isSidebarOpen}/>
Â  Â  Â  Â  Â  Â  <DashboardSidebar isOpen={isSidebarOpen} />
Â  Â  Â  Â  Â  Â  <main className={mainContentClass}>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="error-state">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="section-title-neon">Loading Failed</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="error-message">Error: **{error}**</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link to={`/student/my-courses/${courseId}`} className="btn-action-neon" style={{ marginTop: '10px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaArrowLeft /> Back to Course Details
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </main>
Â  Â  Â  Â  </div>
Â  Â  );

Â  Â  const { materials, courseTitle } = materialsData;
Â  Â  
Â  Â  // 3. Success State UI
Â  Â  return (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  {isProfileOpen && (<ProfileModal authData={{ name: studentName, email: user?.email, userId: user?.id, role: user?.role, logout: handleLogout }} onClose={toggleProfile} />)}
Â  Â  Â  Â  Â  Â  <div className="app-container">
Â  Â  Â  Â  Â  Â  Â  Â  <DashboardNavbar studentName={studentName} onLogout={handleLogout} onProfileToggle={toggleProfile} onSidebarToggle={toggleSidebar} isSidebarOpen={isSidebarOpen}/>
Â  Â  Â  Â  Â  Â  Â  Â  <DashboardSidebar isOpen={isSidebarOpen} />
Â  Â  Â  Â  Â  Â  Â  Â  <main className={mainContentClass}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link to={`/student/my-courses/${courseId}`} className="btn-action-neon" style={{ marginBottom: '20px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaArrowLeft /> Back to **{courseTitle || 'Course'}** Details
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="welcome-banner dashboard-section">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h1 className="section-title-neon">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaFolderOpen /> Course Materials for **{courseTitle}**
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="section-subtitle-neon">Access all shared files, links, and resources for this course.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <hr/>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <section className="dashboard-section core-section">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="section-title-neon">Resources ({materials.length} Total)</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="materials-list-grid">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {materials.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  materials.map(material => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <MaterialCard key={material.id} material={material} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="no-data-message">No course materials have been uploaded yet.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </section>
Â  Â  Â  Â  Â  Â  Â  Â  </main>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </>
Â  Â  );
};

export default StudentCourseMaterialsView;